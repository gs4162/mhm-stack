{"version":3,"sources":["server-node.js"],"names":["module","exports","RED","install","xmlset","coreChore","res","auth","needsPermission","registerType","library","register","require","push","de","bianco","royal","compact","opcua","nodesets","di","adi","json","nodes","nodeConfig","opcuaServer","coreServer","coreServerSandbox","this","name","port","createNode","detailLog","node","id","choreCompact","listenForErrors","setStatusInit","setTimeout","readConfigOfServerNode","initOPCUATimer","setStatusPending","contribOPCUACompact","initialized","constructAddressSpaceScript","server","debugLog","postInitialize","initialize","run","then","vm","setStatusActive","warn","addressSpaceScript","emit","delayToInit","catch","cleanSandboxTimer","err","clearTimeout","stop","done","setStatusClosed","outstandingIntervals","outstandingTimers","length","pop","clearInterval","delayToClose","closeServer"],"mappings":"aAGAA,OAAAC,QAAA,SAAAC,GAEAF,QAAOC,sBAAyBE,UAyG9BD,EAOIE,UAAYC,IACZC,gCARJJ,EAAAK,KAAAC,gBAAA,wBAYAN,SAAUO,EAAAA,GACNC,IAAAA,EAAQC,GAtHdN,EAAAO,QAAA,gBA+GMR,EAAOS,KAAKR,EAAUS,GAAGC,OAAOC,MAAMC,QAAQC,MAAMC,SAASC,IAC7DhB,EAAOS,KAAKR,EAAUS,GAAGC,OAAOC,MAAMC,QAAQC,MAAMC,SAASE,KAC7Df,EAAIgB,KAAKlB,KAIbF,EAAIqB,MAAMd,aAAa,uBAlHvB,SAAgCe,GADhC,IAMEC,EANFC,EAAAd,QAAA,iBAGQe,EAAoBf,QAAQ,yBAE9BW,GAHJrB,EAAMwB,MAAAA,WAAad,KAAQY,GAI3BI,KAAKC,KAAOL,EAAWK,KAHvBD,KAAMD,KAAAA,EAAiBG,KAEbC,MAQVL,GANAA,EAAAM,UAAYR,eAAZS,EAAAC,IAEAR,EAAaS,aAAbC,gBAAAH,GACAP,EAAID,aAAJY,cAAAJ,GACAP,EAAWM,uBAAUC,EAAiBA,GAEtCK,WAAwBD,WACxBX,EAAWa,UAAAA,gBAA6Bf,EAAAA,IAExCE,EAAMc,aAAiBF,iBAAWL,GAEhCP,IAAAA,EAAwBe,EAAAA,qBAAxBR,GAMNA,EAAAS,oBAAA,GAEMT,EAAKS,oBAAoBC,aAAc,EAGvCV,EAAAS,oBAAAE,4BAAA,SAEEC,EADFZ,EAKEN,GAAAA,EAAkBmB,SAAS,wCAG7BrB,EAEasB,EAAAA,WAAqBtB,EAAAA,IADlCuB,WAAA,WAIAtB,EACGuB,eAAUxB,EACVyB,KAFHxB,EACGuB,IAQGhB,EAAKS,GAPRQ,KAQO,WAPNvB,EAAAqB,WAAAf,EAAAP,EAAA,SAAAO,EAAAkB,IASAzB,EAAAA,oBAAwB0B,GAAAA,GAEnBH,IACL,0DACKI,EAALC,oBAPErB,EAAKS,oBAAoBC,aAAc,EASrCV,EAAJsB,KAAU,yBAEbtB,EAAKuB,aA/CRJ,gBAAAnB,KAiDAwB,MAASC,SAAAA,GAELzB,EAAAoB,KAAAM,GAEE1B,EAAAsB,KAAA,oBAAAI,MANH1B,EAQEuB,cAUL,SAMI9B,EAAgBO,GACdK,GALFsB,aAMIlC,GAFJD,EADFC,EAOOmC,KAAA5B,EAAAR,EAAA,WACLqC,WAAI,WACLpC,EAAAS,aAAA4B,gBAAA9B,GACFyB,IAxBeM,EAwBf/B,EAxBe+B,EAwBfF,EA9BC,GAOI7B,EAAAgC,kBAAA,CAED,KAAA,EAAAhC,EAAAgC,kBAAAC,QALCN,aAAa3B,EAAKgC,kBAAkBE,OAQxCL,KAAI,EAAA7B,EAAA+B,qBAAAE,QAJAE,cAAcnC,EAAK+B,qBAAqBG,OAG5CzC,EAMEkC,UAAapB,eAAbP,EAAAC,IACD4B,KAOM7B,EAAKoC,gBAOdP,IASE7B,EAAM7B,GAAAA,QAAN,SAAA0D,GARAQ,EAAYR,OAiBhB5D,EAAIQ,QAAQC,SAAS","file":"../server-node.js","sourcesContent":["/**\n MIT License\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n **/\n\nmodule.exports = function (RED) {\n  require('source-map-support').install()\n  \"use strict\";\n  function OPCUACompactServerNode(nodeConfig) {\n    const coreServer = require(\"./core/server\");\n    const coreServerSandbox = require(\"./core/server-sandbox\");\n\n    RED.nodes.createNode(this, nodeConfig);\n    this.name = nodeConfig.name;\n    this.port = nodeConfig.port;\n\n    const node = this;\n    let opcuaServer;\n    coreServer.detailLog(\"create node \" + node.id);\n    coreServer.choreCompact.listenForErrors(node);\n    coreServer.choreCompact.setStatusInit(node);\n    coreServer.readConfigOfServerNode(node, nodeConfig);\n\n    const initOPCUATimer = setTimeout(() => {\n      coreServer.detailLog(\"pending node \" + node.id);\n      coreServer.choreCompact.setStatusPending(node);\n\n      const opcuaServerOptions = coreServer.defaultServerOptions(node);\n      /* opcuaServerOptions.nodeset_filename = coreServer.loadOPCUANodeSets(\n        node,\n        __dirname\n      );*/\n      node.contribOPCUACompact = {};\n      node.contribOPCUACompact.initialized = false;\n\n      // function placeholder to fill it later from vm2 script\n      /* istanbul ignore next */\n      node.contribOPCUACompact.constructAddressSpaceScript = (\n        server,\n        constructAddressSpaceScript,\n        eventObjects\n      ) => {\n        coreServerSandbox.debugLog(\"Init Function Block Compact Server\"); // placeholder function for sandbox compile\n      };\n\n      opcuaServer = coreServer.initialize(node, opcuaServerOptions);\n      opcuaServer.initialize(() => {\n        coreServer.postInitialize(node, opcuaServer);\n      });\n\n      coreServer\n        .run(node, opcuaServer)\n        .then(() => {\n          coreServerSandbox.initialize(node, coreServer, (node, vm) => {\n            node.contribOPCUACompact.vm = vm;\n            vm.run(\n              \"node.contribOPCUACompact.constructAddressSpaceScript = \" +\n                nodeConfig.addressSpaceScript\n            );\n            node.contribOPCUACompact.initialized = true;\n            node.emit(\"server_node_running\");\n          });\n          coreServer.choreCompact.setStatusActive(node);\n        })\n        .catch((err) => {\n          /* istanbul ignore next */\n          node.warn(err);\n          /* istanbul ignore next */\n          node.emit(\"server_node_error\", err);\n        });\n    }, node.delayToInit);\n\n    function cleanSandboxTimer(node, done) {\n      if (node.outstandingTimers) {\n        // only present if we init the sandbox\n        while (node.outstandingTimers.length > 0) {\n          /* istanbul ignore next */\n          clearTimeout(node.outstandingTimers.pop());\n        }\n        while (node.outstandingIntervals.length > 0) {\n          /* istanbul ignore next */\n          clearInterval(node.outstandingIntervals.pop());\n        }\n      }\n      coreServer.detailLog(\"closed node \" + node.id);\n      done();\n    }\n\n    function closeServer(done) {\n      if (initOPCUATimer) {\n        clearTimeout(initOPCUATimer);\n      }\n\n      if (opcuaServer) {\n        coreServer.stop(node, opcuaServer, () => {\n          setTimeout(() => {\n            coreServer.choreCompact.setStatusClosed(node);\n            cleanSandboxTimer(node, done);\n          }, node.delayToClose);\n        });\n      } else {\n        done();\n      }\n    }\n\n    node.on(\"close\", (done) => {\n      closeServer(done);\n    });\n  }\n\n  RED.httpAdmin.get(\n    \"/OPCUA/compact/xmlsets/public\",\n    RED.auth.needsPermission(\"opcuaCompact.xmlsets\"),\n    function (req, res) {\n      const xmlset = [];\n      const coreChore = require(\"./core/chore\");\n      xmlset.push(coreChore.de.bianco.royal.compact.opcua.nodesets.di);\n      xmlset.push(coreChore.de.bianco.royal.compact.opcua.nodesets.adi);\n      res.json(xmlset);\n    }\n  );\n\n  RED.nodes.registerType(\"opcua-compact-server\", OPCUACompactServerNode);\n  RED.library.register(\"opcua\");\n};\n"]}