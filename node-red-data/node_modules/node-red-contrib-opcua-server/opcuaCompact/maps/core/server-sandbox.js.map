{"version":3,"sources":["core/server-sandbox.js"],"names":["module","exports","require","de","bianco","royal","compact","choreCompact","debugLog","opcuaSandboxDebug","errorLog","coreServer","done","initialize","_clearInterval","_setInterval","_clearTimeout","_setTimeout","VM","outstandingIntervals","node","outstandingTimers","sandboxNodeContext","apply","arguments","set","context","get","keys","flow","global","sandboxFlowContext","sandboxGlobalContext","sandboxEnv","envVar","_flow","func","this","getSetting","sandbox","clearTimeout","timerId","setTimeout","err","error","push","toString","id","index","indexOf","setInterval","clearInterval","splice","_x2","_x","vm","builtin"],"mappings":"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","file":"../../core/server-sandbox.js","sourcesContent":["/**\n MIT License\n Copyright (c) 2018-2022 Klaus Landsdorf (http://node-red.plus/)\n **/\n\"use strict\";\nmodule.exports = {\n  choreCompact: require(\"./chore\").de.bianco.royal.compact,\n  debugLog: require(\"./chore\").de.bianco.royal.compact.opcuaSandboxDebug,\n  errorLog: require(\"./chore\").de.bianco.royal.compact.opcuaErrorDebug,\n  initialize: (node, coreServer, done) => {\n    const { VM } = require(\"vm2\");\n    node.outstandingTimers = [];\n    node.outstandingIntervals = [];\n\n    /* istanbul ignore next */\n    const sandbox = {\n      node,\n      coreServer,\n      sandboxNodeContext: {\n        set: function () {\n          node.context().set.apply(node, arguments);\n        },\n        get: function () {\n          return node.context().get.apply(node, arguments);\n        },\n        keys: function () {\n          return node.context().keys.apply(node, arguments);\n        },\n        get global() {\n          return node.context().global;\n        },\n        get flow() {\n          return node.context().flow;\n        },\n      },\n      sandboxFlowContext: {\n        set: function () {\n          node.context().flow.set.apply(node, arguments);\n        },\n        get: function () {\n          return node.context().flow.get.apply(node, arguments);\n        },\n        keys: function () {\n          return node.context().flow.keys.apply(node, arguments);\n        },\n      },\n      sandboxGlobalContext: {\n        set: function () {\n          node.context().global.set.apply(node, arguments);\n        },\n        get: function () {\n          return node.context().global.get.apply(node, arguments);\n        },\n        keys: function () {\n          return node.context().global.keys.apply(node, arguments);\n        },\n      },\n      sandboxEnv: {\n        get: function (envVar) {\n          const flow = node._flow;\n          return flow.getSetting(envVar);\n        },\n      },\n      setTimeout: function () {\n        const func = arguments[0];\n        const timerId = setTimeout.apply(this, arguments);\n        arguments[0] = function () {\n          sandbox.clearTimeout(timerId);\n          try {\n            func.apply(this, arguments);\n          } catch (err) {\n            node.error(err, {});\n          }\n        };\n        node.outstandingTimers.push(timerId);\n        return timerId;\n      },\n      clearTimeout: function (id) {\n        clearTimeout(id);\n        const index = node.outstandingTimers.indexOf(id);\n        if (index > -1) {\n          node.outstandingTimers.splice(index, 1);\n        }\n      },\n      setInterval: function () {\n        const func = arguments[0];\n        const timerId = setInterval.apply(this, arguments);\n        arguments[0] = function () {\n          try {\n            func.apply(this, arguments);\n          } catch (err) {\n            node.error(err, {});\n          }\n        };\n        node.outstandingIntervals.push(timerId);\n        return timerId;\n      },\n      clearInterval: function (id) {\n        clearInterval(id);\n        const index = node.outstandingIntervals.indexOf(id);\n        if (index > -1) {\n          node.outstandingIntervals.splice(index, 1);\n        }\n      },\n    };\n\n    const vm = new VM({\n      require: {\n        builtin: [\"fs\", \"Math\", \"Date\", \"console\"],\n      },\n      sandbox,\n    });\n\n    done(node, vm);\n  },\n};\n"]}